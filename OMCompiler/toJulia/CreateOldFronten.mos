
     /*
     *     Automatically generated by generateTranslationTemplate.el
     *     @author Emacs
     */
     setCommandLineOptions("-g=MetaModelica");getErrorString();

      print("Translating Absyn into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Absyn.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Absyn.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Absyn); getErrorString();

      print("Translating AbsynToSCode into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/AbsynToSCode.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/AbsynToSCode.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(AbsynToSCode); getErrorString();

      print("Translating AbsynUtil into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/AbsynUtil.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/AbsynUtil.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(AbsynUtil); getErrorString();

      print("Translating Algorithm into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Algorithm.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Algorithm.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Algorithm); getErrorString();

      print("Translating AvlTreePathFunction into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/AvlTreePathFunction.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/AvlTreePathFunction.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(AvlTreePathFunction); getErrorString();

      print("Translating BackendInterface into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/BackendInterface.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/BackendInterface.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(BackendInterface); getErrorString();

      print("Translating Builtin into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Builtin.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Builtin.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Builtin); getErrorString();

      print("Translating CevalFunction into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/CevalFunction.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/CevalFunction.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(CevalFunction); getErrorString();

      print("Translating Ceval into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Ceval.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Ceval.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Ceval); getErrorString();

      print("Translating Checdel into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Checdel.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Checdel.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Checdel); getErrorString();

      print("Translating ClassInf into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/ClassInf.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/ClassInf.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(ClassInf); getErrorString();

      print("Translating ClassLoader into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/ClassLoader.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/ClassLoader.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(ClassLoader); getErrorString();

      print("Translating ComponentReference into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/ComponentReference.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/ComponentReference.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(ComponentReference); getErrorString();

      print("Translating ConnectionGraph into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/ConnectionGraph.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/ConnectionGraph.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(ConnectionGraph); getErrorString();

      print("Translating Connect into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Connect.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Connect.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Connect); getErrorString();

      print("Translating ConnectUtil into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/ConnectUtil.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/ConnectUtil.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(ConnectUtil); getErrorString();

      print("Translating Constants into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Constants.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Constants.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Constants); getErrorString();

      print("Translating DAEDump into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/DAEDump.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/DAEDump.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(DAEDump); getErrorString();

      print("Translating DAE into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/DAE.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/DAE.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(DAE); getErrorString();

      print("Translating DAEUtil into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/DAEUtil.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/DAEUtil.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(DAEUtil); getErrorString();

      print("Translating DumpGraphviz into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/DumpGraphviz.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/DumpGraphviz.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(DumpGraphviz); getErrorString();

      print("Translating Dump into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Dump.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Dump.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Dump); getErrorString();

      print("Translating ElementSource into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/ElementSource.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/ElementSource.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(ElementSource); getErrorString();

      print("Translating ExpressionDump into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/ExpressionDump.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/ExpressionDump.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(ExpressionDump); getErrorString();

      print("Translating Expression into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Expression.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Expression.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Expression); getErrorString();

      print("Translating ExpressionSimplify into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/ExpressionSimplify.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/ExpressionSimplify.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(ExpressionSimplify); getErrorString();

      print("Translating ExpressionSimplifyTypes into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/ExpressionSimplifyTypes.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/ExpressionSimplifyTypes.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(ExpressionSimplifyTypes); getErrorString();

      print("Translating Graphviz into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Graphviz.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Graphviz.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Graphviz); getErrorString();

      print("Translating Inline into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Inline.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Inline.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Inline); getErrorString();

      print("Translating InnerOuter into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/InnerOuter.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/InnerOuter.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(InnerOuter); getErrorString();

      print("Translating InstBinding into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/InstBinding.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/InstBinding.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(InstBinding); getErrorString();

      print("Translating InstDAE into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/InstDAE.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/InstDAE.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(InstDAE); getErrorString();

      print("Translating InstExtends into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/InstExtends.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/InstExtends.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(InstExtends); getErrorString();

      print("Translating InstFunction into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/InstFunction.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/InstFunction.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(InstFunction); getErrorString();

      print("Translating InstHashTable into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/InstHashTable.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/InstHashTable.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(InstHashTable); getErrorString();

      print("Translating InstMeta into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/InstMeta.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/InstMeta.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(InstMeta); getErrorString();

      print("Translating Inst into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Inst.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Inst.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Inst); getErrorString();

      print("Translating InstSection into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/InstSection.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/InstSection.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(InstSection); getErrorString();

      print("Translating InstStateMachineUtil into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/InstStateMachineUtil.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/InstStateMachineUtil.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(InstStateMachineUtil); getErrorString();

      print("Translating InstTypes into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/InstTypes.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/InstTypes.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(InstTypes); getErrorString();

      print("Translating InstUtil into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/InstUtil.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/InstUtil.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(InstUtil); getErrorString();

      print("Translating InstVar into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/InstVar.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/InstVar.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(InstVar); getErrorString();

      print("Translating Lookup into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Lookup.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Lookup.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Lookup); getErrorString();

      print("Translating MetdelicaBuiltin into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/MetdelicaBuiltin.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/MetdelicaBuiltin.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(MetdelicaBuiltin); getErrorString();

      print("Translating MetaUtil into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/MetaUtil.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/MetaUtil.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(MetaUtil); getErrorString();

      print("Translating MMathdelicaBuiltind into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/MMathdelicaBuiltind.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/MMathdelicaBuiltind.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(MMathdelicaBuiltind); getErrorString();

      print("Translating NFEnvExtends into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/NFEnvExtends.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/NFEnvExtends.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(NFEnvExtends); getErrorString();

      print("Translating NFInstDump into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/NFInstDump.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/NFInstDump.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(NFInstDump); getErrorString();

      print("Translating NFInstPrefix into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/NFInstPrefix.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/NFInstPrefix.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(NFInstPrefix); getErrorString();

      print("Translating NFInstTypes into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/NFInstTypes.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/NFInstTypes.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(NFInstTypes); getErrorString();

      print("Translating NFInstUtil into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/NFInstUtil.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/NFInstUtil.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(NFInstUtil); getErrorString();

      print("Translating NFSCodeCheck into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/NFSCodeCheck.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/NFSCodeCheck.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(NFSCodeCheck); getErrorString();

      print("Translating NFSCodeDependency into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/NFSCodeDependency.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/NFSCodeDependency.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(NFSCodeDependency); getErrorString();

      print("Translating NFSCodeEnv into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/NFSCodeEnv.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/NFSCodeEnv.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(NFSCodeEnv); getErrorString();

      print("Translating NFSCodeFlattenImports into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/NFSCodeFlattenImports.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/NFSCodeFlattenImports.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(NFSCodeFlattenImports); getErrorString();

      print("Translating NFSCodeFlatten into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/NFSCodeFlatten.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/NFSCodeFlatten.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(NFSCodeFlatten); getErrorString();

      print("Translating NFSCodeFlattenRedeclare into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/NFSCodeFlattenRedeclare.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/NFSCodeFlattenRedeclare.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(NFSCodeFlattenRedeclare); getErrorString();

      print("Translating NFSCodeLookup into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/NFSCodeLookup.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/NFSCodeLookup.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(NFSCodeLookup); getErrorString();

      print("Translating OperatorOverloading into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/OperatorOverloading.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/OperatorOverloading.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(OperatorOverloading); getErrorString();

      print("Translating ParserExt into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/ParserExt.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/ParserExt.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(ParserExt); getErrorString();

      print("Translating Parser into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Parser.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Parser.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Parser); getErrorString();

      print("Translating Patternm into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Patternm.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Patternm.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Patternm); getErrorString();

      print("Translating PDdelicaBuiltin into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/PDdelicaBuiltin.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/PDdelicaBuiltin.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(PDdelicaBuiltin); getErrorString();

      print("Translating Prefix into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Prefix.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Prefix.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Prefix); getErrorString();

      print("Translating PrefixUtil into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/PrefixUtil.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/PrefixUtil.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(PrefixUtil); getErrorString();

      print("Translating SCodeDump into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/SCodeDump.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/SCodeDump.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(SCodeDump); getErrorString();

      print("Translating SCodeInstUtil into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/SCodeInstUtil.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/SCodeInstUtil.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(SCodeInstUtil); getErrorString();

      print("Translating SCode into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/SCode.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/SCode.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(SCode); getErrorString();

      print("Translating SCodeSimplify into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/SCodeSimplify.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/SCodeSimplify.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(SCodeSimplify); getErrorString();

      print("Translating SCodeUtil into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/SCodeUtil.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/SCodeUtil.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(SCodeUtil); getErrorString();

      print("Translating StateMachineFlatten into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/StateMachineFlatten.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/StateMachineFlatten.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(StateMachineFlatten); getErrorString();

      print("Translating Static into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Static.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Static.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Static); getErrorString();

      print("Translating Types into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Types.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Types.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Types); getErrorString();

      print("Translating UnitAbsynBuilder into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/UnitAbsynBuilder.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/UnitAbsynBuilder.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(UnitAbsynBuilder); getErrorString();

      print("Translating UnitAbsyn into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/UnitAbsyn.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/UnitAbsyn.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(UnitAbsyn); getErrorString();

      print("Translating UnitChecker into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/UnitChecker.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/UnitChecker.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(UnitChecker); getErrorString();

      print("Translating UnitParserExt into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/UnitParserExt.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/UnitParserExt.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(UnitParserExt); getErrorString();

      print("Translating Values into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/Values.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/Values.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(Values); getErrorString();

      print("Translating ValuesUtil into Julia!\n"); getErrorString();
      loadFile("Compiler/FrontEnd/ValuesUtil.mo"); getErrorString();
      writeFile("toJulia/toJuliaOutput/FrontEnd/ValuesUtil.jl",
      OpenModelica.Scripting.Experimental.toJulia()); getErrorString();
      deleteClass(ValuesUtil); getErrorString();
